import org.apache.tools.ant.taskdefs.condition.Os
import java.time.LocalDate

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withSourcesJar()
    if (!JavaVersion.current().isJava11Compatible()) {
        withJavadocJar()
    }
}

tasks.named("sourcesJar") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

if (JavaVersion.current().isJava11Compatible()) {
    tasks.register("javadocJar", Jar) {
        dependsOn tasks.named("java11doc").get()
        from tasks.named("java11doc").get().outputs

        archiveClassifier = "javadoc"
    }

    tasks.named("jar").configure {
        finalizedBy tasks.named("javadocJar")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.warnings = false
    options.compilerArgs += '-Xlint:-deprecation'
    options.compilerArgs += '-Xlint:-unchecked'
}

tasks.withType(Javadoc).configureEach {
    onlyIf {
        (JavaVersion.current() == JavaVersion.VERSION_1_8)
    }

    options.addStringOption('Xdoclint:none', '-quiet')
    options.setMemberLevel(JavadocMemberLevel.PUBLIC)
    options.links('https://docs.oracle.com/javase/8/docs/api/')
}

tasks.withType(Jar).configureEach {
    def gitVersion = System.getenv("CI_COMMIT_SHORT_SHA") ?: "${grgit?.head()?.abbreviatedId}"
    def year = LocalDate.now().year;

    manifest {
        attributes(
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Revision' : gitVersion ?: getDistVersion(),
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Subset'         : "Public",
                'Copyright'      : "$year Identity Works LLC https://www.identityworksllc.com/"
        )
    }
}

tasks.register('java11doc', JavaExec) {
    enabled = JavaVersion.current().isJava11Compatible() && !Os.isFamily(Os.FAMILY_WINDOWS)

    dependsOn "classes"

    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
               '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED']

    classpath sourceSets.main.compileClasspath
    mainClass = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', "IDW IIQ Common (public)",
            '-use',
            '-linksource',
            '-link', 'https://docs.oracle.com/en/java/javase/11/docs/api/',
            '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '-doclet', 'org.jdrupes.mdoclet.MDoclet',
            '-docletpath', (configurations.markdownDoclet.files as List).join(":"),
            '-d', file("${project.buildDir}/docs/javadoc"),
            '-sourcepath', 'src/',
            '-subpackages', 'com.identityworksllc.iiq.common',
            '-Xdoclint:-html'
    ]

    inputs.files(sourceSets.main.allJava.files)
    outputs.dir(file("${project.buildDir}/docs/javadoc"))
}
