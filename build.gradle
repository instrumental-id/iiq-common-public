import java.text.SimpleDateFormat
import java.time.LocalDate

buildscript {
    repositories { obj ->
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath "org.ajoberstar.grgit:grgit-gradle:4.1.1"
        classpath 'org.aspectj:aspectjrt:1.8.9'
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm-pdf:3.3.2"

        if (JavaVersion.current().isJava11Compatible()) {
            // This is not a plugin in Java 11+
        } else {
            classpath("gradle.plugin.org.jdrupes.mdoclet:gradle-plugin:1.0.10")
        }
    }
}

apply plugin: 'checkstyle'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: "org.ajoberstar.grgit"

if (JavaVersion.current().isJava8()) {
    apply plugin: "org.jdrupes.mdoclet"
}

def getDistVersion() {
    def branch = System.getenv('CI_COMMIT_BRANCH')

    def now = new Date()
    def format = new SimpleDateFormat("yyyyMM.dd.HHmmss")
    def mavenVersion = format.format(now)

    if (branch == null || branch != "main") {
        return mavenVersion + "-SNAPSHOT"
    } else {
        return mavenVersion
    }
}

/* This is where the compiler finds its inputs */
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
        }
    }
}

def libRoot = project.getProperties().getOrDefault("idw.minimal.libpath", "lib")

/* Where to get dependency libraries */
repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url "https://plugins.gradle.org/m2/"
    }

    flatDir {
        dirs "${libRoot}/sailpoint"
    }
}

jar {
    def gitVersion = System.getenv("CI_COMMIT_SHORT_SHA") ?: "${grgit?.head()?.abbreviatedId}"
    def year = LocalDate.now().year;

    manifest {
        attributes(
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Revision' : gitVersion ?: getDistVersion(),
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Subset'         : "Public",
                'Copyright'      : "$year Identity Works LLC https://www.identityworksllc.com/"
        )
    }
}

tasks.register("javadocJar", Jar) {
    if (JavaVersion.current().isJava11Compatible()) {
        dependsOn tasks.named("java11doc").get()
        from tasks.named("java11doc").get().outputs
    } else {
        dependsOn tasks.named("javadoc").get()
        from tasks.named("javadoc").get().outputs
    }

    archiveClassifier = "javadoc"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8

    withSourcesJar()
    if (!JavaVersion.current().isJava11Compatible()) {
        withJavadocJar()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {

                name = 'IIQ Common Public'
                description = 'A library of common SailPoint IdentityIQ utilities for Rules and Java code'
                url = 'https://www.identityworksllc.com/utilities/iiqcommon'
                packaging = "jar"
                inceptionYear = "2022"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = "repo"
                    }
                }

                organization {
                    name = "Identity Works LLC"
                    url = "https://www.identityworksllc.com"
                }

                developers {
                    developer {
                        id = "drosenbauer"
                        name = "Devin Rosenbauer"
                        email = "devin@instrumentalid.com"
                        organization = "Identity Works LLC"
                    }
                }

                scm {
                    connection = 'scm:git:git://git.identityworksllc.com/pub/iiqcommon.git'
                    developerConnection = 'scm:git:ssh://git.identityworksllc.com/pub/iiqcommon.git'
                    url = 'https://www.identityworksllc.com/utilities/iiqcommon'
                }
            }

            pom.withXml {
                Node pomNode = asNode()
                pomNode.dependencies.'*'.findAll() {
                    it.artifactId.text().contains('identityiq')
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }
    repositories {
        maven {
            url "https://git.identityworksllc.com/api/v4/projects/157/packages/maven"

            credentials(HttpHeaderCredentials) {
                name = 'Job-Token'
                value = System.getenv("CI_JOB_TOKEN")
            }
            
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

group 'com.identityworksllc.iiq.common.minimal'
version getDistVersion()

tasks.named("sourcesJar") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

/**
 * Disables the Gradle Module Metadata, which breaks on the IIQ JARs that have
 * no versions defined.
 * https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html#sub:disabling-gmm-publication
 */
tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

/*
 * A quick and easy way to run the Plugin Installer command line tool. The downside
 * is that the output is not as easy to parse via a command pipeline.
 */
tasks.register("pluginTool", JavaExec) {
    classpath = files(tasks.jar)

    mainClass = "com.identityworksllc.iiq.common.plugin.RemotePluginInstaller"

    args '-p', 'plugin-installer.properties', project.findProperty("cmd"), project.findProperty("arg")
}

tasks.withType(JavaCompile).configureEach {
    options.warnings = false
    options.compilerArgs += '-Xlint:-deprecation'
    options.compilerArgs += '-Xlint:-unchecked'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Javadoc).configureEach {
    onlyIf {
        (JavaVersion.current() == JavaVersion.VERSION_1_8)
    }

    options.addStringOption('Xdoclint:none', '-quiet')
    options.setMemberLevel(JavadocMemberLevel.PUBLIC)
    options.links('https://docs.oracle.com/javase/8/docs/api/')
}

tasks.register('java11doc', JavaExec) {
    enabled = JavaVersion.current().isJava11Compatible()

    dependsOn "classes"

    jvmArgs = ['--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
               '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED']

    classpath sourceSets.main.compileClasspath
    mainClass = 'jdk.javadoc.internal.tool.Main'
    args = ['-doctitle', "IDW IIQ Common (public)",
            '-use',
            '-linksource',
            '-link', 'https://docs.oracle.com/en/java/javase/11/docs/api/',
            '--add-exports', 'jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '-doclet', 'org.jdrupes.mdoclet.MDoclet',
            '-docletpath', (configurations.markdownDoclet.files as List).join(":"),
            '-d', file("${project.buildDir}/docs/javadoc"),
            '-sourcepath', 'src/',
            '-subpackages', 'com.identityworksllc.iiq.common',
            '-Xdoclint:-html'
    ]

    inputs.files(sourceSets.main.allJava.files)
    outputs.dir(file("${project.buildDir}/docs/javadoc"))
}

def includeLib = fileTree(dir: "${libRoot}/included")
includeLib.include "*.jar"

configurations {
    markdownDoclet
    toolLibraries
    implementation.extendsFrom toolLibraries
}

dependencies {
    markdownDoclet "org.jdrupes.mdoclet:doclet:2.1.0"

    implementation ":identityiq:"
    implementation ":connector-bundle-identityiq:"

    implementation includeLib

    toolLibraries 'info.picocli:picocli:4.+'
    toolLibraries group: 'org.jline', name: 'jline', version: '3.+'

    implementation group: 'org.glassfish.jersey.bundles', name: 'jaxrs-ri', version: '2.22.2'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    implementation group: 'org.apache.velocity', name: 'velocity', version: '1.7'
    implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    implementation group: 'javax.faces', name: 'javax.faces-api', version: '2.3'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
    implementation group: 'bsf', name: 'bsf', version: '2.4.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.1'
    implementation group: 'org.springframework', name: 'spring-core', version: '5.2.15.RELEASE'
    implementation group: 'com.google.guava', name: 'guava', version: '11.0.1'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    implementation (group: 'net.sf.jasperreports', name: 'jasperreports', version: '4.5.1'){
        exclude group: 'org.bouncycastle'
        exclude group: 'bouncycastle'
    }
}
